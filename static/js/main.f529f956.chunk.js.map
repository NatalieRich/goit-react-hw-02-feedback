{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","components/Feedback.js","App.js","reportWebVitals.js","index.js","components/Feedback.module.css"],"names":["Statistics","good","neutral","bad","total","percentage","FeedbackOptions","props","options","map","option","type","className","s","button","onClick","onLeaveFeedback","charAt","toUpperCase","substr","Section","children","section","Notification","Feedback","state","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","totalFeedback","this","positiveFeedbackPercentage","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"oPAgBeA,EAbI,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC5C,OACI,qCACQ,4CACA,uCAAUJ,EAAV,OACA,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,Y,gBCMAC,EAdQ,SAACC,GACrB,OACI,mCACKA,EAAMC,QAAQC,KAAI,SAAAC,GAAM,OACrB,wBAEIC,KAAK,SACLC,UAAWC,IAAEC,OACbC,QAAS,kBAAMR,EAAMS,gBAAgBN,IAJzC,SAKEA,EAAOO,OAAO,GAAGC,cAAgBR,EAAOS,OAAO,IAJxCT,SCHVU,EAFA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,qBAAKT,UAAWC,IAAES,QAAlB,SAA4BD,KCK9CE,EANM,WACjB,OACI,mDC+DOC,E,4MA3DbC,MAAQ,CACRxB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGFa,gBAAgB,SAACN,GACd,EAAKgB,SAAL,eAAiBhB,EAAS,EAAKe,MAAMf,GAAS,K,EAKlDiB,mBAAqB,WAIjB,OAHe,EAAKF,MAAbxB,KACW,EAAKwB,MAAhBvB,QACO,EAAKuB,MAAZtB,K,EAIXyB,gCAAkC,WAC9B,GAAkC,IAA9B,EAAKD,qBACL,OAAO,EAEX,IAAM1B,EAAO,EAAKwB,MAAMxB,KACxB,OAAO4B,KAAKC,MAAW,IAAL7B,EAAS,EAAK0B,uB,uDAI/B,IAAMI,EAAgBC,KAAKL,qBACrBM,EAA6BD,KAAKJ,kCAG1C,OAAQ,gCAEJ,eAAC,EAAD,WACC,uDACD,cAAC,EAAD,CACIpB,QAAS,CAAC,OAAQ,UAAW,OAC7BQ,gBAAiBgB,KAAKhB,qBAG1B,cAAC,EAAD,UACuB,IAAlBe,EACG,cAAC,EAAD,IAAmB,cAAC,EAAD,CACvB9B,KAAM+B,KAAKP,MAAMxB,KACjBC,QAAS8B,KAAKP,MAAMvB,QACpBC,IAAK6B,KAAKP,MAAMtB,IAChBC,MAAO2B,EACP1B,WAAY4B,a,GAlDJC,aCMRC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,QAAU,0BAA0B,OAAS,4B","file":"static/js/main.f529f956.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Statistics = ({good, neutral, bad, total, percentage }) => {\r\n    return (\r\n        <>\r\n                <h2>Statistics</h2>\r\n                <p>Good: {good} </p>\r\n                <p>Neutral: {neutral}</p>\r\n                <p>Bad: {bad}</p>\r\n                <p>Total: {total}</p>\r\n                <p>Positive feedback: {percentage}% </p>\r\n                </>\r\n    )\r\n}\r\n\r\nexport default Statistics","import React from 'react'\r\nimport  s from './Feedback.module.css'\r\n\r\nconst FeedbackOptions = (props) => {\r\n    return (\r\n        <>\r\n            {props.options.map(option => (\r\n                <button\r\n                    key={option}\r\n                    type='button'\r\n                    className={s.button}\r\n                    onClick={() => props.onLeaveFeedback(option)}\r\n                >{option.charAt(0).toUpperCase() + option.substr(1)}</button>))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default  FeedbackOptions","import React from 'react';\r\nimport s from './Feedback.module.css'\r\n\r\nconst Section= ({ children }) => <div className={s.section}>{children}</div>;\r\n\r\nexport default Section;","import React from 'react'\r\n\r\nconst Notification = () => {\r\n    return (\r\n        <p>No feedback given</p>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { Component } from 'react';\r\nimport Statistics from './Statistics'\r\nimport FeedbackOptions from './FeedbackOptions'\r\nimport Section from './Section'\r\nimport Notification from './Notification'\r\n\r\nclass Feedback extends Component {\r\n\r\n  state = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0\r\n    }\r\n\r\n     onLeaveFeedback=(option) => {\r\n        this.setState({ [option]: this.state[option] +1 })\r\n    }\r\n\r\n    \r\n    \r\n    countTotalFeedback = () => {\r\n        const {good} = this.state;\r\n        const {neutral} = this.state\r\n        const {bad} = this.state\r\n        return  (good+neutral+bad)\r\n    }\r\n   \r\n    countPositiveFeedbackPercentage = () => {\r\n        if (this.countTotalFeedback() === 0) {\r\n            return 0;\r\n        }\r\n        const good = this.state.good;\r\n        return Math.round(good*100/this.countTotalFeedback())\r\n    }\r\n    \r\n    render() {\r\n         const totalFeedback = this.countTotalFeedback()\r\n         const positiveFeedbackPercentage = this.countPositiveFeedbackPercentage()\r\n        \r\n        \r\n       return (<div>\r\n           \r\n           <Section>\r\n            <h1>Please leave feedback</h1>\r\n           <FeedbackOptions\r\n               options={['good', 'neutral', 'bad']}\r\n               onLeaveFeedback={this.onLeaveFeedback} />\r\n           </Section>\r\n           \r\n           <Section> \r\n               {totalFeedback === 0 ?\r\n                   <Notification /> : <Statistics\r\n               good={this.state.good}\r\n               neutral={this.state.neutral}\r\n               bad={this.state.bad}\r\n               total={totalFeedback}\r\n               percentage={positiveFeedbackPercentage}\r\n           />}\r\n                  \r\n               \r\n           \r\n           </Section>  \r\n\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Feedback","\nimport './App.css';\nimport Feedback from './components/Feedback'\n\nfunction App() {\n  return (\n    <div > \n      <Feedback/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Feedback_section__IQfqg\",\"button\":\"Feedback_button__3Etbp\"};"],"sourceRoot":""}